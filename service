import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.ClientResponse;
import reactor.core.publisher.Mono;
import org.springframework.stereotype.Component;

@Component
public class WebClientService {

    private final WebClient webClient;

    public WebClientService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://example.com").build();  // URL del servicio intermedio
    }

    public Mono<ResponseEntity<BffResponse<Object, Void>>> callExternalService(String body) {
        return webClient.post()
                .uri("/your-endpoint")
                .bodyValue(body)  // Usamos el body proporcionado
                .retrieve()
                .onStatus(statusCode -> statusCode.value() >= 200 && statusCode.value() < 300, response -> {
                    // Si el código de estado es 2xx (exitoso), deserializamos la respuesta en BffResponse<Object, Void>
                    return response.bodyToMono(BffResponse.class)
                            .flatMap(bffResponse -> {
                                // Aquí puedes realizar cualquier lógica adicional con el cuerpo deserializado
                                System.out.println("Respuesta exitosa: " + bffResponse);
                                return Mono.just(ResponseEntity.ok(bffResponse));  // Devuelves el objeto dentro de ResponseEntity con código 200
                            });
                })
                .onStatus(statusCode -> statusCode.equals(HttpStatus.UNPROCESSABLE_ENTITY), response -> {
                    // Si el código de estado es 422 (Unprocessable Entity), manejamos la respuesta también
                    return response.bodyToMono(BffResponse.class)
                            .flatMap(bffResponse -> {
                                // Lógica adicional para 422
                                System.out.println("Respuesta 422: " + bffResponse);
                                return Mono.just(ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(bffResponse));  // Devuelves el objeto con código 422
                            });
                })
                .onStatus(statusCode -> statusCode.equals(HttpStatus.INTERNAL_SERVER_ERROR), response -> {
                    // Si el código de estado es 500 (Internal Server Error), retornamos Mono.empty()
                    return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new BffResponse<>())); // Devuelve un ResponseEntity con error vacío
                })
                .bodyToMono(BffResponse.class)
                .flatMap(bffResponse -> {
                    // Lógica adicional para manejar la respuesta correctamente
                    return Mono.just(ResponseEntity.ok(bffResponse));  // Devuelves el objeto en un ResponseEntity con código 200
                });
    }
}