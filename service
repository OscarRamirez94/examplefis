import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

public class WebClientService {

    private final WebClient webClient;

    public WebClientService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://example.com").build();  // URL del servicio intermedio
    }

    public Mono<ResponseEntity<String>> callExternalService(String body) {
        return webClient.post()
                .uri("/your-endpoint")
                .bodyValue(body)  // El cuerpo de la solicitud
                .retrieve()
                .onStatus(HttpStatus::is5xxServerError, response -> {
                    // Si la respuesta tiene un código 5xx, devolvemos una respuesta con error
                    return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Internal server error"));
                })
                .onStatus(HttpStatus::is4xxClientError, response -> {
                    // Si la respuesta tiene un código 4xx, lo procesamos
                    return response.bodyToMono(String.class)
                            .flatMap(errorBody -> {
                                if (response.statusCode().equals(HttpStatus.UNPROCESSABLE_ENTITY)) {
                                    // Si es 422, devolvemos la misma respuesta
                                    return response.bodyToMono(String.class)
                                            .flatMap(body -> Mono.just(ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(body)));
                                }
                                // Si no es 422, devolvemos un error genérico
                                return Mono.just(ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error 4xx: " + errorBody));
                            });
                })
                .onStatus(HttpStatus::is2xxSuccessful, response -> {
                    // Si la respuesta tiene un código 2xx, procesamos el cuerpo y continuamos el flujo
                    return response.bodyToMono(String.class)
                            .flatMap(bodyResponse -> {
                                return Mono.just(ResponseEntity.ok(bodyResponse));  // Continuamos con el flujo
                            });
                })
                .bodyToMono(String.class)  // Aquí definimos el tipo de la respuesta como String
                .flatMap(responseBody -> {
                    // Si el código de estado es 200, retornamos el ResponseEntity con el cuerpo
                    return Mono.just(ResponseEntity.ok(responseBody));
                });
    }
}