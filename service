import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;

@Service
public class WebClientService {

    private final WebClient webClient;

    public WebClientService(WebClient.Builder webClientBuilder) {
        // Suponiendo que el servicio intermedio tiene una URL base
        this.webClient = webClientBuilder.baseUrl("http://example.com").build();
    }

    public Mono<ResponseEntity<String>> callExternalService(String body) {
        return webClient.post()
                .uri("/your-endpoint")  // Cambia esta URI según tu caso
                .bodyValue(body)        // Estableces el cuerpo de la solicitud
                .retrieve()             // Realiza la llamada
                .onStatus(HttpStatus::is2xxSuccessful, response -> {
                    // Si el estado es 200 OK, continuamos el flujo
                    return response.bodyToMono(String.class)
                            .flatMap(responseBody -> {
                                // Retornamos el cuerpo del servicio
                                return Mono.just(ResponseEntity.ok(responseBody));
                            });
                })
                .onStatus(HttpStatus::is4xxClientError, response -> {
                    // Si la respuesta es 4xx (errores de cliente)
                    if (response.statusCode().equals(HttpStatus.UNPROCESSABLE_ENTITY)) {
                        // Si es 422, devolvemos la misma respuesta (el cuerpo de la respuesta)
                        return response.bodyToMono(String.class)
                                .flatMap(errorBody -> Mono.just(ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(errorBody)));
                    }
                    return response.bodyToMono(String.class)
                            .flatMap(errorBody -> Mono.just(ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorBody)));
                })
                .onStatus(HttpStatus::is5xxServerError, response -> {
                    // Si la respuesta tiene un código 5xx, puedes manejarlo aquí
                    return response.bodyToMono(String.class)
                            .flatMap(errorBody -> Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorBody)));
                })
                .bodyToMono(String.class)  // Procesamos el cuerpo como String
                .flatMap(responseBody -> {
                    // Si la respuesta es 200, procesamos el cuerpo y lo devolvemos
                    return Mono.just(ResponseEntity.ok(responseBody));
                });
    }
}