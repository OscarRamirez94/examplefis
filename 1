
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.Mockito.*;

class GetCustomerInfoOperationTest {

    @Mock
    private CreditCardService creditCardService;

    @InjectMocks
    private GetCustomerInfoOperation getCustomerInfoOperation;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void handle_shouldReturnCreditProductResponse() {
        // Arrange: Preparamos los datos de entrada y los mocks
        CreditCardParamsRq request = new CreditCardParamsRq();
        CreditProductResponse<CreditProduct> creditProductResponse = new CreditProductResponse<>();
        
        ResponseEntity<CreditProductResponse<CreditProduct>> expectedResponse =
                ResponseEntity.ok(creditProductResponse);

        // Simulamos que el servicio devuelve el CreditProductResponse esperado
        when(creditCardService.getCreditProductsMock(request)).thenReturn(Mono.just(creditProductResponse));

        // Act: Llamamos al método que queremos probar
        Mono<ResponseEntity<CreditProductResponse<CreditProduct>>> result = getCustomerInfoOperation.handle(request);

        // Assert: Verificamos el comportamiento
        StepVerifier.create(result)
                .expectNextMatches(responseEntity -> 
                    responseEntity.getStatusCode().is2xxSuccessful() &&
                    responseEntity.getBody() != null
                )
                .verifyComplete();

        verify(creditCardService, times(1)).getCreditProductsMock(request);
    }
}


import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;

@RunWith(MockitoJUnitRunner.class)
public class CustomerLookupRequestDelegateTest {

    @Mock
    private GetCustomerInfoOperation getCustomerInfoOperation;

    @InjectMocks
    private CustomerLookupRequestDelegate customerLookupRequestDelegate;

    private CustomerLookupRequest request;

    @Before
    public void setUp() {
        request = new CustomerLookupRequest(); // o inicialízalo con datos de prueba si es necesario
    }

    @Test
    public void testHandleCustomerLookupRequest_Success() {
        // Arrange
        CreditProductResponse<CreditProduct> creditProductResponse = new CreditProductResponse<>();
        ResponseEntity<CreditProductResponse<CreditProduct>> responseEntity = ResponseEntity.ok(creditProductResponse);
        
        when(getCustomerInfoOperation.handle(any(CustomerLookupRequest.class)))
                .thenReturn(Mono.just(responseEntity));
        
        // Act
        Mono<ResponseEntity<CreditProductResponse<CreditProduct>>> responseMono = customerLookupRequestDelegate.handleCustomerLookupRequest(request);
        
        // Assert
        ResponseEntity<CreditProductResponse<CreditProduct>> result = responseMono.block(); // Solo en test
        assertNotNull(result);
        assertEquals(responseEntity, result);
        
        verify(getCustomerInfoOperation, times(1)).handle(request);
    }
}



public abstract class WebClientWrapperResponse {
}

public class CreditCardInquireStatusDaysSuccess extends WebClientWrapperResponse {
    private CreditCardInquireStatusDaysResponse data;

    public CreditCardInquireStatusDaysSuccess(CreditCardInquireStatusDaysResponse data) {
        this.data = data;
    }

    public CreditCardInquireStatusDaysResponse getData() {
        return data;
    }
}

public class CreditCardInquireStatusDaysError extends WebClientWrapperResponse {
    private ErrorResponse error;

    public CreditCardInquireStatusDaysError(ErrorResponse error) {
        this.error = error;
    }

    public ErrorResponse getError() {
        return error;
    }
}



import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

public class CreditCardConnector {

    private final WebClient webClient;

    public CreditCardConnector(WebClient webClient) {
        this.webClient = webClient;
    }

    public Mono<WebClientWrapperResponse> invokeCreditStatus(CreditCardInquireStatusDaysRequest request) {
        return webClient.post()
            .uri("/deposit/services/CreditCardInquireStatusDays/")
            .bodyValue(request)
            .exchangeToMono(clientResponse -> {
                if (clientResponse.statusCode().is2xxSuccessful()) {
                    return clientResponse.bodyToMono(CreditCardInquireStatusDaysResponse.class)
                        .map(CreditCardInquireStatusDaysSuccess::new);
                } else {
                    return clientResponse.bodyToMono(String.class)
                        .map(errorBody -> {
                            ErrorResponse error = new ErrorResponse("1", "Error en el servidor: " + errorBody);
                            return new CreditCardInquireStatusDaysError(error);
                        });
                }
            });
    }
}



import reactor.core.publisher.Mono;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

public class CreditCardService {

    private final CreditCardConnector connector;

    public CreditCardService(CreditCardConnector connector) {
        this.connector = connector;
    }

    public Mono<ResponseEntity<CreditCardInquireStatusDaysResponse>> getCreditStatus(CreditCardInquireStatusDaysRequest request) {
        return connector.invokeCreditStatus(request)
            .flatMap(wrapperResponse -> {
                if (wrapperResponse instanceof CreditCardInquireStatusDaysSuccess) {
                    CreditCardInquireStatusDaysSuccess success = (CreditCardInquireStatusDaysSuccess) wrapperResponse;
                    return Mono.just(ResponseEntity.ok(success.getData()));
                } else if (wrapperResponse instanceof CreditCardInquireStatusDaysError) {
                    CreditCardInquireStatusDaysError error = (CreditCardInquireStatusDaysError) wrapperResponse;
                    return Mono.just(ResponseEntity
                        .status(HttpStatus.BAD_REQUEST)
                        .body(null)); // o puedes crear un error más detallado si quieres
                } else {
                    return Mono.just(ResponseEntity
                        .status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(null));
                }
            });
    }
}


import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;
import org.springframework.http.ResponseEntity;

@RestController
@RequestMapping("/credit-card")
public class CreditCardController {

    private final CreditCardService creditCardService;

    public CreditCardController(CreditCardService creditCardService) {
        this.creditCardService = creditCardService;
    }

    @PostMapping("/inquire-status-days")
    public Mono<ResponseEntity<CreditCardInquireStatusDaysResponse>> inquireStatusDays(@RequestBody CreditCardInquireStatusDaysRequest request) {
        return creditCardService.getCreditStatus(request);
    }
}


public class CreditCardInquireStatusDaysRequest {
    // atributos
}

public class CreditCardInquireStatusDaysResponse {
    // atributos
}

public class ErrorResponse {
    private String codigo;
    private String mensaje;

    public ErrorResponse(String codigo, String mensaje) {
        this.codigo = codigo;
        this.mensaje = mensaje;
    }

    public String getCodigo() {
        return codigo;
    }

    public String getMensaje() {
        return mensaje;
    }
}



@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface WebClientResponseHandler {
}


import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.ProceedingJoinPoint;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.http.HttpStatus;

@Aspect
@Component
public class WebClientResponseAspect {

    @Around("@annotation(WebClientResponseHandler)")
    public Object handleWebClientResponse(ProceedingJoinPoint joinPoint) throws Throwable {
        Object result = joinPoint.proceed();

        if (result instanceof Mono<?>) {
            return ((Mono<?>) result)
                .flatMap(response -> {
                    if (response instanceof ClientResponse) {
                        ClientResponse clientResponse = (ClientResponse) response;

                        if (clientResponse.statusCode().is2xxSuccessful()) {
                            return clientResponse.bodyToMono(CreditCardInquireStatusDaysResponse.class);
                        } else {
                            return clientResponse.bodyToMono(String.class)
                                .map(errorBody -> new ErrorResponse("1", "Error en el servidor: " + errorBody));
                        }
                    } else {
                        return Mono.just(response); // no es un ClientResponse
                    }
                });
        }

        return result;
    }
}


public class CreditCardConnector {

    private final WebClient webClient;

    public CreditCardConnector(WebClient webClient) {
        this.webClient = webClient;
    }

    @WebClientResponseHandler
    public Mono<ClientResponse> invokeCreditStatus(CreditCardInquireStatusDaysRequest request) {
        return webClient.post()
            .uri("/deposit/services/CreditCardInquireStatusDays/")
            .bodyValue(request)
            .exchangeToMono(Mono::just);
    }
}


import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import reactor.core.publisher.Mono;

public class CreditCardService {

    private final CreditCardConnector connector;

    public CreditCardService(CreditCardConnector connector) {
        this.connector = connector;
    }

    public Mono<ResponseEntity<?>> getCreditStatus(CreditCardInquireStatusDaysRequest request) {
        return connector.invokeCreditStatus(request)
            .flatMap(response -> {
                if (response instanceof CreditCardInquireStatusDaysResponse) {
                    // Éxito
                    CreditCardInquireStatusDaysResponse success = (CreditCardInquireStatusDaysResponse) response;
                    return Mono.just(ResponseEntity.ok(success));
                } else if (response instanceof ErrorResponse) {
                    // Error
                    ErrorResponse error = (ErrorResponse) response;
                    return Mono.just(ResponseEntity
                        .status(HttpStatus.BAD_REQUEST) // podrías variar el status aquí según el código
                        .body(error));
                } else {
                    // Algo totalmente inesperado
                    ErrorResponse unknownError = new ErrorResponse("999", "Respuesta desconocida del servidor.");
                    return Mono.just(ResponseEntity
                        .status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(unknownError));
                }
            });
    }
}


import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api/v1/creditcard")
public class CreditCardController {

    private final CreditCardService creditCardService;

    public CreditCardController(CreditCardService creditCardService) {
        this.creditCardService = creditCardService;
    }

    @PostMapping("/status")
    public Mono<ResponseEntity<?>> getCreditCardStatus(@RequestBody CreditCardInquireStatusDaysRequest request) {
        return creditCardService.getCreditStatus(request);
    }
}