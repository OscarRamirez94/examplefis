import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.Map;

@Component
public class PreRequestFilter implements GatewayFilter {

    private final WebClient.Builder webClientBuilder;

    public PreRequestFilter(WebClient.Builder webClientBuilder) {
        this.webClientBuilder = webClientBuilder;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        // Obtener los headers y el body de la solicitud original
        HttpHeaders headers = exchange.getRequest().getHeaders();
        Map<String, Object> body = exchange.getAttribute("cachedRequestBodyObject");

        // Endpoint intermedio
        String url = "http://otro-endpoint.com/consulta"; // El endpoint previo

        // Realizar la solicitud al servicio intermedio con WebClient
        return webClientBuilder.baseUrl(url)
                .method(HttpMethod.valueOf(exchange.getRequest().getMethod().name()))
                .uri(exchange.getRequest().getURI())
                .headers(httpHeaders -> httpHeaders.addAll(headers))
                .bodyValue(body)
                .retrieve()
                .toEntity(String.class) // Usamos String para capturar el cuerpo de la respuesta como texto
                .flatMap(response -> {
                    int statusCode = response.getStatusCode().value();
                    String responseBody = response.getBody(); // Obtener el cuerpo de la respuesta

                    // Si la respuesta es 200 OK, continuamos con el flujo normal
                    if (statusCode == 200) {
                        return chain.filter(exchange);
                    }

                    // Si la respuesta es 422, respondemos con el mismo cuerpo y status 422
                    if (statusCode == 422) {
                        ServerWebExchange mutatedExchange = exchange.mutate().response(
                                exchange.getResponse().setStatusCode(HttpStatus.UNPROCESSABLE_ENTITY)
                        ).build();

                        // Establecer el cuerpo de la respuesta y devolverlo al cliente
                        mutatedExchange.getResponse().getHeaders().setContentType(HttpHeaders.parseContentType("application/json"));
                        mutatedExchange.getResponse().writeWith(Mono.just(mutatedExchange.getResponse().bufferFactory().wrap(responseBody.getBytes())));

                        return mutatedExchange.getResponse().setComplete();
                    }

                    // Para cualquier otro c√≥digo de estado, continuar con la solicitud original
                    return chain.filter(exchange);
                });
    }
}