Para simular un DataAccessException en un repositorio usando Mockito, puedes configurar un mock de manera que un método específico del repositorio lance esta excepción cuando sea llamado. En Mockito, puedes hacer esto utilizando el método thenThrow().

Te mostraré un ejemplo de cómo hacerlo:

Ejemplo de simulación de DataAccessException:

Supongamos que tienes un repositorio que interactúa con una base de datos, y quieres simular que un método de este repositorio lanza una DataAccessException.

import static org.mockito.Mockito.*;
import org.springframework.dao.DataAccessException;
import org.junit.jupiter.api.Test;
import java.util.List;

public class RepositorioTest {

    // Interfaz del repositorio
    public interface MiRepositorio {
        List<String> obtenerDatos() throws DataAccessException;
    }

    @Test
    public void testRepositorioConDataAccessException() {
        // Crear el mock del repositorio
        MiRepositorio repositorioMock = mock(MiRepositorio.class);

        // Configurar el mock para que lance un DataAccessException cuando se llame al método obtenerDatos
        when(repositorioMock.obtenerDatos()).thenThrow(new DataAccessException("Error de acceso a datos") {});

        // Verificar que el DataAccessException es lanzado al llamar al método
        try {
            repositorioMock.obtenerDatos();
        } catch (DataAccessException e) {
            // Aquí manejas la excepción, por ejemplo, imprimiendo el mensaje
            System.out.println("Excepción capturada: " + e.getMessage());
        }
    }
}

Explicación de los pasos:

1. Crear el mock del repositorio: Usamos mock(MiRepositorio.class) para crear un mock del repositorio que tiene el método obtenerDatos.


2. Simular el lanzamiento de la excepción: Usamos when(repositorioMock.obtenerDatos()).thenThrow(new DataAccessException("Error de acceso a datos") {}); para configurar el mock de manera que cuando se invoque el método obtenerDatos, lance una DataAccessException.


3. Capturar la excepción: Al ejecutar el método repositorioMock.obtenerDatos(), se lanzará la DataAccessException que hemos configurado, y la podemos capturar dentro de un bloque try-catch.



Personalización:

Si necesitas simular un DataAccessException específico, puedes pasar un mensaje o configurarlo de acuerdo a tus necesidades.

Si el método lanza otras excepciones o realiza otras acciones, también puedes simular eso con thenThrow() o configurar otros stubs para diferentes métodos del mock.


Consideraciones adicionales:

Asegúrate de importar correctamente las clases de Mockito y Spring, como DataAccessException.

Este tipo de simulación es muy útil cuando quieres probar cómo tu código maneja excepciones sin tener que interactuar con una base de datos real.


Si tienes más dudas o un caso específico que quieras simular, no dudes en comentarlo.

