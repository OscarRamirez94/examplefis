import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import org.springframework.stereotype.Component;

@Component
public class CustomGatewayFilter implements GatewayFilter {

    private final WebClient webClient;

    public CustomGatewayFilter(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://cliente-servicio.com").build(); // Ajusta la URL base de tu servicio
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {

        // Realizar la llamada WebClient
        return webClient.get()
                .uri("/api/check-status")  // Ajusta la ruta de la API
                .retrieve()
                .toEntity(String.class)  // Suponemos que la respuesta es una entidad tipo String
                .flatMap(response -> {
                    // Si la respuesta es OK (HTTP 200) y contiene el código 001 en el cuerpo
                    if (response.getStatusCode().equals(HttpStatus.OK)) {
                        String body = response.getBody();
                        if (body != null && body.contains("code\":\"001")) {
                            // Si el código es 001, retornar una respuesta personalizada y detener la ejecución de los filtros
                            return handleCode001(exchange);
                        } else if (body != null && body.contains("code\":\"002")) {
                            // Si el código es 002, permitir que continúen los filtros
                            return chain.filter(exchange);
                        }
                    }
                    // Si no es código 001 o 002, permitir que continúen los filtros
                    return chain.filter(exchange);
                })
                .onErrorResume(error -> {
                    // Si hay un error (por ejemplo, el cliente no está disponible), continuar con los filtros
                    return chain.filter(exchange);
                });
    }

    private Mono<Void> handleCode001(ServerWebExchange exchange) {
        ServerHttpResponse response = exchange.getResponse();
        
        // Modificar la respuesta para el código 001
        response.setStatusCode(HttpStatus.BAD_REQUEST);  // Puedes ajustar el código HTTP si lo deseas
        response.getHeaders().set("Content-Type", "text/plain");

        // Crear una nueva respuesta para enviar al cliente
        String newBody = "Respuesta personalizada debido al código 001";
        return response.writeWith(Mono.just(response.bufferFactory().wrap(newBody.getBytes())))
                .then(Mono.empty()); // Terminamos aquí para evitar que se ejecuten los siguientes filtros
    }
}