import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.http.HttpStatus;
import reactor.core.publisher.Mono;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

@Component
public class WebClientService {

    private final WebClient webClient;

    public WebClientService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://example.com").build();  // URL del servicio intermedio
    }

    // Método para realizar la llamada al servicio y manejar la respuesta según el código de estado
    public Mono<Void> callExternalService(ServerWebExchange exchange, GatewayFilterChain chain) {
        return webClient.post()
                .uri("/your-endpoint")  // Endpoint del servicio
                .bodyValue(exchange.getAttribute("cachedRequestBodyObject"))  // El cuerpo de la solicitud
                .retrieve()
                .onStatus(HttpStatus::is2xxSuccessful, response -> {
                    // Si la respuesta es 200 OK, simplemente continuamos con el flujo normal
                    return Mono.empty();
                })
                .onStatus(HttpStatus::is4xxClientError, response -> {
                    // Si el código de estado es 422, tratamos la respuesta como un error
                    if (response.statusCode() == HttpStatus.UNPROCESSABLE_ENTITY) {
                        return response.bodyToMono(String.class).flatMap(body -> {
                            // Crear una respuesta personalizada con el código 422 y el cuerpo recibido
                            exchange.getResponse().setStatusCode(HttpStatus.UNPROCESSABLE_ENTITY);
                            exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(body.getBytes())));
                            return Mono.empty();
                        });
                    }
                    // Si no es 422, retornamos un error genérico para otros códigos 4xx
                    return Mono.error(new RuntimeException("Unexpected error: " + response.statusCode()));
                })
                .onStatus(HttpStatus::is5xxServerError, response -> {
                    // Si el código de estado es 500 (Internal Server Error), simplemente continuamos con el flujo
                    return Mono.empty();  // Continuamos con el siguiente filtro sin modificar la respuesta
                })
                .bodyToMono(String.class)  // Convertir la respuesta a String (puedes adaptarlo a lo que necesitas)
                .doOnTerminate(() -> {
                    // Continuar con el flujo si es 200 OK o si fue 500
                    chain.filter(exchange).subscribe();
                });
    }
}