import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

@Configuration
public class WebClientConfig {

    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder()
                .filter(logRequest())  // Filtro para registrar la solicitud
                .filter(logResponse()); // Filtro para registrar la respuesta
    }

    // Filtro para registrar la solicitud, incluyendo los headers y el body
    private ExchangeFilterFunction logRequest() {
        return ExchangeFilterFunction.ofRequestProcessor(clientRequest -> {
            // Registrar la URL y el mÃ©todo de la solicitud
            System.out.println("Request: " + clientRequest.method() + " " + clientRequest.url());

            // Registrar los headers de la solicitud
            clientRequest.headers().forEach((name, values) -> 
                values.forEach(value -> System.out.println(name + ": " + value)));

            // Si la solicitud tiene cuerpo, lo leemos y lo mostramos sin consumir el flujo
            if (clientRequest.body() != null) {
                return clientRequest.bodyToMono(String.class)  // Convertimos el cuerpo a String
                        .doOnNext(body -> System.out.println("Request Body: " + body))  // Mostrar el cuerpo
                        .then(Mono.just(clientRequest));  // Continuar con la solicitud sin consumir el flujo
            }

            return Mono.just(clientRequest);  // Si no tiene cuerpo, continuamos con la solicitud
        });
    }

    // Filtro para registrar la respuesta
    private ExchangeFilterFunction logResponse() {
        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {
            // Registrar el estado de la respuesta
            System.out.println("Response status: " + clientResponse.statusCode());

            // Registrar el cuerpo de la respuesta (opcional)
            return clientResponse.bodyToMono(String.class)
                    .doOnNext(body -> System.out.println("Response Body: " + body))
                    .then(Mono.just(clientResponse));
        });
    }
}