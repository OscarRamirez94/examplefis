


@Service
public class FiltroServicio {

    private final ClienteServicioExterno clienteServicioExterno;

    public FiltroServicio(ClienteServicioExterno clienteServicioExterno) {
        this.clienteServicioExterno = clienteServicioExterno;
    }

    public Flux<RespuestaFiltrada> filtrarPorStatus(String status) {
        return clienteServicioExterno.obtenerDatos()
            .map(respuestaExterna -> {
                // Si hay errores, retornamos la respuesta tal cual
                if (respuestaExterna.getErrores() != null && !respuestaExterna.getErrores().isEmpty()) {
                    return new RespuestaFiltrada(Collections.emptyList(), "Errores encontrados", "400");
                }

                // Filtramos la lista de resultados por status
                List<StatusDto> filtrados = respuestaExterna.getResultados().stream()
                        .filter(dto -> status.equalsIgnoreCase(dto.getStatus()))
                        .collect(Collectors.toList());

                // Convertimos la lista de StatusDto a una lista de NuevoDto
                List<NuevoDto> nuevaLista = filtrados.stream()
                        .map(dto -> new NuevoDto(dto.getStatus(), "Descripción para el status " + dto.getStatus()))
                        .collect(Collectors.toList());

                // Creamos una nueva respuesta con la lista convertida y los atributos adicionales
                return new RespuestaFiltrada(nuevaLista, "Datos filtrados correctamente", "200");
            });
    }
}








public class RespuestaFiltrada {
    private List<NuevoDto> listaFiltrada; // Lista de objetos NuevoDto
    private String mensaje;
    private String codigo;

    // Constructor, getters y setters
    public RespuestaFiltrada(List<NuevoDto> listaFiltrada, String mensaje, String codigo) {
        this.listaFiltrada = listaFiltrada;
        this.mensaje = mensaje;
        this.codigo = codigo;
    }

    public List<NuevoDto> getListaFiltrada() {
        return listaFiltrada;
    }

    public void setListaFiltrada(List<NuevoDto> listaFiltrada) {
        this.listaFiltrada = listaFiltrada;
    }

    public String getMensaje() {
        return mensaje;
    }

    public void setMensaje(String mensaje) {
        this.mensaje = mensaje;
    }

    public String getCodigo() {
        return codigo;
    }

    public void setCodigo(String codigo) {
        this.codigo = codigo;
    }
}


@RestController
@RequestMapping("/api/filtrado")
public class FiltradoController {

    private final FiltroServicio filtroServicio;

    public FiltradoController(FiltroServicio filtroServicio) {
        this.filtroServicio = filtroServicio;
    }

    @GetMapping
    public Flux<ResponseEntity<RespuestaFiltrada>> obtenerFiltrado(@RequestParam(defaultValue = "I") String status) {
        return filtroServicio.filtrarPorStatus(status)
            .map(respuestaFiltrada -> ResponseEntity.ok(respuestaFiltrada));
    }
}




@RestController
@RequestMapping("/api/filtrado")
public class FiltradoController {

    private final FiltroServicio filtroServicio;

    public FiltradoController(FiltroServicio filtroServicio) {
        this.filtroServicio = filtroServicio;
    }

    @GetMapping
    public Flux<ResponseEntity<RespuestaFiltrada>> obtenerFiltrado(@RequestParam(defaultValue = "I") String status) {
        return filtroServicio.filtrarPorStatus(status)
            .flatMap(respuestaFiltrada -> {
                // Si la lista filtrada está vacía, retornamos un "no content"
                if (respuestaFiltrada.getListaFiltrada().isEmpty()) {
                    return Flux.just(ResponseEntity.noContent().build()); // O podrías retornar un BAD_REQUEST, según tu necesidad
                }
                // Si la lista tiene datos, retornamos OK con la lista filtrada
                return Flux.just(ResponseEntity.ok(respuestaFiltrada));
            });
    }
}



monosingle 



@RestController
@RequestMapping("/api/filtrado")
public class FiltradoController {

    private final FiltroServicio filtroServicio;

    public FiltradoController(FiltroServicio filtroServicio) {
        this.filtroServicio = filtroServicio;
    }

    @GetMapping
    public Mono<ResponseEntity<RespuestaFiltrada>> obtenerFiltrado(@RequestParam(defaultValue = "I") String status) {
        return filtroServicio.filtrarPorStatus(status)
            .map(respuesta -> {
                if (respuesta.getListaFiltrada().isEmpty()) {
                    return ResponseEntity.noContent().build();
                }
                return ResponseEntity.ok(respuesta);
            })
            .defaultIfEmpty(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new RespuestaFiltrada(Collections.emptyList(), "Error al procesar datos", "500")));
    }
}



@Service
public class FiltroServicio {

    private final ClienteServicioExterno clienteServicioExterno;

    public FiltroServicio(ClienteServicioExterno clienteServicioExterno) {
        this.clienteServicioExterno = clienteServicioExterno;
    }

    public Mono<RespuestaFiltrada> filtrarPorStatus(String status) {
        return clienteServicioExterno.obtenerDatos()
            .map(respuestaExterna -> {
                if (respuestaExterna.getErrores() != null && !respuestaExterna.getErrores().isEmpty()) {
                    return new RespuestaFiltrada(Collections.emptyList(), "Errores encontrados", "400");
                }

                List<StatusDto> filtrados = respuestaExterna.getResultados().stream()
                        .filter(dto -> status.equalsIgnoreCase(dto.getStatus()))
                        .collect(Collectors.toList());

                List<NuevoDto> nuevaLista = filtrados.stream()
                        .map(dto -> new NuevoDto(dto.getStatus(), "Descripción para el status " + dto.getStatus()))
                        .collect(Collectors.toList());

                return new RespuestaFiltrada(nuevaLista, "Filtrado exitoso", "200");
            });
    }





@Service
public class FiltroServicio {

    private final ClienteServicioExterno clienteServicioExterno;

    public FiltroServicio(ClienteServicioExterno clienteServicioExterno) {
        this.clienteServicioExterno = clienteServicioExterno;
    }

    public Mono<ResponseEntity<RespuestaFiltrada>> filtrarPorStatus(String status) {
        return clienteServicioExterno.obtenerDatos()
            .map(respuestaExterna -> {
                if (respuestaExterna.getErrores() != null && !respuestaExterna.getErrores().isEmpty()) {
                    return ResponseEntity
                        .badRequest()
                        .body(new RespuestaFiltrada(Collections.emptyList(), "Errores encontrados", "400"));
                }

                List<StatusDto> filtrados = respuestaExterna.getResultados().stream()
                        .filter(dto -> status.equalsIgnoreCase(dto.getStatus()))
                        .collect(Collectors.toList());

                List<NuevoDto> nuevaLista = filtrados.stream()
                        .map(dto -> new NuevoDto(dto.getStatus(), "Descripción " + dto.getStatus()))
                        .collect(Collectors.toList());

                if (nuevaLista.isEmpty()) {
                    return ResponseEntity.noContent().build();
                }

                return ResponseEntity.ok(new RespuestaFiltrada(nuevaLista, "Filtrado exitoso", "200"));
            })
            .defaultIfEmpty(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new RespuestaFiltrada(Collections.emptyList(), "Error inesperado", "500")));
    }
}