public Mono<PagedResponse<CreditDTO>> getCreditsPaged(Integer cursor, Integer limit) {
    int start = (cursor != null) ? cursor : 0;
    int end = Math.min(start + limit, mockData.size());

    List<CreditDTO> page = mockData.subList(start, end);
    boolean moreRecords = end < mockData.size();
    Integer nextCursor = moreRecords ? end : null;

    return Mono.just(
        new PagedResponse<>(page, nextCursor, moreRecords)
    );
}

,,,,,,,

public class PagedResponse<T> {
    private List<T> data;
    private Integer nextCursor;
    private boolean moreRecords;

    // constructor, getters, setters


........
public Flux<CreditDTO> getCreditsFiltered(String tipo, String status) {
    return getMockCredits()
        .filter(dto -> tipo == null || dto.getTipo().equals(tipo))
        .filter(dto -> status == null || dto.getStatus().equals(status));
}


.........
public class PaginationUtils {

    public static <T> Mono<PagedResponse<T>> paginate(Flux<T> source, Integer cursor, Integer limit) {
        return source.collectList()
            .map(fullList -> {
                int start = (cursor != null) ? cursor : 0;
                int end = Math.min(start + limit, fullList.size());

                List<T> page = fullList.subList(start, end);
                boolean moreRecords = end < fullList.size();
                Integer nextCursor = moreRecords ? end : null;

                return new PagedResponse<>(page, nextCursor, moreRecords);
            });
    }
}