import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;

@Component
public class CustomGatewayFilter implements GatewayFilter {

    private final BodyTransformer bodyTransformer;
    private final WebClientService webClientService;

    public CustomGatewayFilter(BodyTransformer bodyTransformer, WebClientService webClientService) {
        this.bodyTransformer = bodyTransformer;
        this.webClientService = webClientService;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        // Llamar al método que transforma el cuerpo de la solicitud a Mono<String>
        return bodyTransformer.transformBodyToJson(exchange)
                .flatMap(bodyAsString -> {
                    // Llamar al método que invoca el servicio externo con WebClient
                    return webClientService.callExternalService(bodyAsString)
                            .flatMap(response -> {
                                // Aquí puedes hacer lo que necesites con la respuesta
                                // Ejemplo: loguear la respuesta
                                System.out.println("Response from external service: " + response);

                                // Continuar con el flujo normal
                                return chain.filter(exchange);
                            });
                });
    }
}