import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.http.HttpStatus;

public class MiServicio {

    private final WebClient webClient;

    public MiServicio(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://tu-api.com").build();
    }

    // Método para hacer la petición
    public Mono<ClientResponse> hacerPeticion() {
        return webClient.get()
                .uri("/ruta")
                .retrieve()
                .toEntity(String.class)  // Se puede ajustar según el tipo de respuesta
                .flatMap(response -> {
                    if (response.getStatusCode() == HttpStatus.UNPROCESSABLE_ENTITY) { // 422
                        // Aquí manejas el código 422, extraemos la Notificación
                        String responseBody = response.getBody();
                        Notificacion notificacion = extraerNotificacion(responseBody);
                        return Mono.error(new TipoErrorException(notificacion));  // Lanza una excepción con la notificación
                    } else {
                        return Mono.just(response);
                    }
                });
    }

    // Método que extrae la notificación del cuerpo de la respuesta
    private Notificacion extraerNotificacion(String body) {
        // Aquí puedes parsear el body según la estructura de tu respuesta
        // Suponiendo que el cuerpo es un JSON que contiene los campos "mensaje" y "codigo"
        Notificacion notificacion = new Notificacion();
        notificacion.setMensaje("Mensaje extraído del cuerpo: " + body);  // Simulando extracción
        notificacion.setCodigo("Código extraído");
        return notificacion;
    }
}