
webClient.get()
         .uri("/tu-endpoint")
         .retrieve()
         .onStatus(HttpStatus::is5xxServerError, response ->
             response.bodyToMono(String.class) // El mensaje de error en texto plano
                     .map(msg -> new MiObjetoRespuesta(msg)) // Convertimos el string en tu objeto
                     .flatMap(objeto -> Mono.error(new MiExcepcionConObjeto(objeto)))
         )
         .bodyToMono(TuClaseRespuesta.class);





webClient.get()
         .uri("/tu-endpoint")
         .retrieve()
         .onStatus(HttpStatus::is5xxServerError, response ->
             response.bodyToMono(MiObjetoRespuesta.class)
                     .flatMap(body -> Mono.error(new MiExcepcionConObjeto(body)))
         )
         .bodyToMono(TuClaseRespuesta.class);




webClient.get()
         .uri("/tu-endpoint")
         .retrieve()
         .onStatus(HttpStatus::is5xxServerError, response ->
             response.bodyToMono(String.class)  // Leemos el body si es error
                     .map(errorMsg -> {
                         MiObjetoRespuesta obj = new MiObjetoRespuesta();
                         obj.setNotificationMessage(errorMsg); // Guardamos el mensaje
                         return obj;
                     })
                     .flatMap(objeto -> Mono.error(new MiExcepcionConObjeto(objeto)))
         )
         .onStatus(HttpStatus::is2xxSuccessful, response ->
             response.bodyToMono(TuClaseRespuesta.class)  // Cuando es 200, mapeamos a otro tipo
         )
         .doOnError(e -> {
             // Opcional: Manejo de errores global o logging
             System.out.println("Error: " + e.getMessage());
         })
         .onErrorResume(MiExcepcionConObjeto.class, ex -> {
             // Manejo de la excepci√≥n personalizada, retornamos el objeto
             return Mono.just(ex.getRespuesta());
         });