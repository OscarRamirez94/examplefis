
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

public class CreditProductServiceTest {

    private final CreditProductService creditProductService = new CreditProductService(); // o un mock si lo necesitas

    @Test
    void testServicioRetornaRespuestaCorrecta() {
        Mono<CreditProductResponse<CreditProduct>> resultado = creditProductService.obtenerProductoCredito();

        StepVerifier.create(resultado)
                .expectNextMatches(response ->
                        response != null &&
                        response.getData() != null &&
                        !response.getData().isEmpty() &&
                        "1".equals(response.getData().get(0).getCode())
                )
                .verifyComplete();
    }
}










@WebFluxTest(CreditProductController.class)
class CreditProductControllerWebTest {

    @Autowired
    private WebTestClient webTestClient;

    @MockBean
    private CreditProductService service;

    @Test
    void shouldReturnOkWithCreditProducts() {
        CreditProduct creditProduct = new CreditProduct("001", "Tarjeta Oro");
        CreditProductResponse<CreditProduct> response = new CreditProductResponse<>();
        response.setData(List.of(creditProduct));

        when(service.getProducts()).thenReturn(Mono.just(response));

        webTestClient.get()
            .uri("/credit-products")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBody()
            .jsonPath("$.data[0].id").isEqualTo("001")
            .jsonPath("$.data[0].name").isEqualTo("Tarjeta Oro");
    }

    @Test
    void shouldReturnNoContentWhenNoProducts() {
        when(service.getProducts()).thenReturn(Mono.empty());

        webTestClient.get()
            .uri("/credit-products")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isNoContent();
    }
}