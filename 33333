import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.core.io.buffer.DataBufferUtils;
import reactor.core.publisher.Mono;

@Component
public class CustomGatewayFilter implements WebFilter {

    private final WebClient.Builder webClientBuilder;

    public CustomGatewayFilter(WebClient.Builder webClientBuilder) {
        this.webClientBuilder = webClientBuilder;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        // Primero, capturamos el cuerpo de la solicitud
        return DataBufferUtils.join(exchange.getRequest().getBody())
                .map(dataBuffer -> {
                    // Convertimos el cuerpo de la solicitud en un String
                    String requestBody = new String(dataBuffer.readableByteCount(), dataBuffer.asByteBuffer(), "UTF-8");

                    // Aquí, puedes pasar este requestBody a WebClient
                    return requestBody;
                })
                .flatMap(requestBody -> {
                    // Realizamos la solicitud al servicio externo con WebClient
                    return webClientBuilder.baseUrl("https://api.example.com")
                            .post()  // Suponiendo que sea un POST, puedes cambiar el método según sea necesario
                            .uri("/endpoint")
                            .bodyValue(requestBody)  // Pasamos el cuerpo original de la solicitud
                            .retrieve()
                            .onStatus(status -> status.value() == 422, clientResponse -> {
                                // Si la respuesta es 422, leemos el cuerpo original de la respuesta
                                return clientResponse.bodyToMono(String.class)
                                        .flatMap(body -> {
                                            // Establecemos el código de estado 422 en la respuesta del Gateway
                                            exchange.getResponse().setStatusCode(HttpStatus.UNPROCESSABLE_ENTITY);
                                            exchange.getResponse().getHeaders().add("Content-Type", "application/json");

                                            // Creamos el cuerpo de la respuesta que queremos retornar (puedes personalizar el mensaje)
                                            String responseBody = "{\"message\": \"Error procesando la solicitud: " + body + "\"}";
                                            
                                            // Convertimos el cuerpo a DataBuffer para enviarlo
                                            DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(responseBody.getBytes());

                                            // Escribimos el cuerpo de la respuesta y detenemos la ejecución del resto de los filtros
                                            return exchange.getResponse().writeWith(Mono.just(dataBuffer))
                                                    .then(Mono.defer(() -> {
                                                        // Cortamos la cadena de filtros
                                                        return exchange.getResponse().setComplete(); // No se ejecutan filtros posteriores
                                                    }));
                                        });
                            })
                            .flatMap(clientResponse -> {
                                // Si la respuesta no es 422, pasamos la respuesta al flujo original
                                return chain.filter(exchange);
                            });
                });
    }
}