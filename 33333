@Override
public Mono<ResponseEntity<?>> invoke2(CreditCardInquireStatusDaysRequest request) {
    return webClient.post()
        .uri("/deposit/services/CreditCardInquireStatusDays/")
        .bodyValue(request)
        .exchangeToMono(clientResponse -> {
            if (clientResponse.statusCode().is2xxSuccessful()) {
                return clientResponse.bodyToMono(CreditCardInquireStatusDaysResponse.class)
                    .map(body -> (ResponseEntity<?>) ResponseEntity.status(clientResponse.statusCode()).body(body));
            } else {
                return clientResponse.bodyToMono(String.class)
                    .map(errorBody -> {
                        ErrorResponse error = new ErrorResponse("1", "Error en el servidor: " + errorBody);
                        return (ResponseEntity<?>) ResponseEntity.status(clientResponse.statusCode()).body(error);
                    });
            }
        });
}



return webClient.post()
    .uri("/deposit/services/CreditCardInquireStatusDays/")
    .bodyValue(request)
    .exchangeToMono(response -> {
        if (response.statusCode().is2xxSuccessful()) {
            return response.toEntity(CreditCardInquireStatusDaysResponse.class);
        } else {
            return response.bodyToMono(String.class)
                .flatMap(errorBody -> {
                    ErrorResponse error = new ErrorResponse("1", "Error en la respuesta del servidor: " + errorBody);
                    return Mono.just(ResponseEntity.status(response.statusCode()).body(error));
                });
        }
    });




import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

public class FiltroFechas {

    record Evento(String nombre, LocalDate fecha) {}

    public static void main(String[] args) {
        List<Evento> eventos = List.of(
            new Evento("Evento A", LocalDate.of(2025, 4, 20)),
            new Evento("Evento B", LocalDate.of(2025, 4, 22)),
            new Evento("Evento C", LocalDate.of(2025, 5, 1))
        );

        LocalDate startDate = LocalDate.of(2025, 4, 21);
        LocalDate endDate = LocalDate.of(2025, 4, 30);

        List<Evento> filtrados = eventos.stream()
            .filter(e -> !e.fecha().isBefore(startDate) && !e.fecha().isAfter(endDate))
            .collect(Collectors.toList());

        filtrados.forEach(e -> System.out.println(e.nombre() + " - " + e.fecha()));
    }
}