import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.ClientResponse;
import reactor.core.publisher.Mono;

@Component
public class CustomGatewayInterceptor implements WebFilter {

    private final WebClient webClient;

    public CustomGatewayInterceptor(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://tu-api-base-url").build();
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        return webClient.get()
                .uri("/ruta-del-cliente")
                .retrieve()
                .onStatus(status -> status.value() == 422, response -> {
                    // Si la respuesta es 422, deserializamos en un BFFResponse
                    return response.bodyToMono(BFFResponse.class)
                            .flatMap(bffResponse -> {
                                // Aquí construimos el ResponseEntity con el BFFResponse
                                // y devolvemos la respuesta al cliente con el código 422
                                exchange.getResponse().setStatusCode(HttpStatus.UNPROCESSABLE_ENTITY);
                                return exchange.getResponse().writeWith(Mono.just(exchange.getResponse()
                                    .bufferFactory().wrap(bffResponse.toString().getBytes())));
                            });
                })
                .onStatus(status -> status.value() != 422, response -> {
                    // Para otros códigos de estado, simplemente continuamos con el siguiente filtro
                    return response.bodyToMono(String.class)
                            .then(chain.filter(exchange));  // Continuar con el siguiente filtro
                })
                .then(chain.filter(exchange));  // Continúa con el siguiente filtro si no se lanza error
    }
}