import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.Map;

@Component
public class CustomGatewayInterceptor implements WebFilter {

    private final WebClient webClient;

    public CustomGatewayInterceptor(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://tu-api-base-url").build();
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        return webClient.get()
                .uri("/ruta-del-cliente")
                .retrieve()
                .onStatus(status -> status.value() == 422, response -> {
                    // Si el código de estado es 422, convertimos el cuerpo a un Map
                    return response.bodyToMono(Map.class)  // Convertir el cuerpo a un Map
                            .flatMap(responseBody -> {
                                // Aquí podemos trabajar con el Map de respuesta
                                // Por ejemplo, creamos una excepción personalizada con los valores del Map
                                String errorMessage = (String) responseBody.get("errorMessage");
                                int errorCode = (Integer) responseBody.get("errorCode");

                                // Crear la excepción con los valores del Map
                                CustomException customException = new CustomException(errorMessage, errorCode);

                                // Lanza la excepción con Mono.error, interrumpe el flujo
                                return Mono.error(customException);
                            });
                })
                .onStatus(status -> status.value() != 422, response -> {
                    // Si no es 422, simplemente continuamos con el siguiente filtro
                    return response.bodyToMono(String.class)
                            .then(chain.filter(exchange));  // Continuamos con el siguiente filtro
                })
                .then(chain.filter(exchange));  // Continua con el siguiente filtro si no se lanza error
    }

    // Excepción personalizada
    public static class CustomException extends RuntimeException {
        private final int errorCode;

        public CustomException(String message, int errorCode) {
            super(message);
            this.errorCode = errorCode;
        }

        public int getErrorCode() {
            return errorCode;
        }
    }
}