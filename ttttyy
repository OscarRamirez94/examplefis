import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.io.IOException;

@Component
public class CustomGatewayInterceptor implements WebFilter {

    private final WebClient webClient;
    private final ObjectMapper objectMapper;

    public CustomGatewayInterceptor(WebClient.Builder webClientBuilder, ObjectMapper objectMapper) {
        this.webClient = webClientBuilder.baseUrl("http://tu-api-base-url").build();
        this.objectMapper = objectMapper;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        return webClient.get()
                .uri("/ruta-del-cliente")
                .retrieve()
                .onStatus(status -> status.value() == 422, response -> {
                    // Si el código de estado es 422, convertir el cuerpo a un BffResponse
                    return response.bodyToMono(String.class)
                            .flatMap(body -> {
                                // Usar TypeReference para deserializar el cuerpo en BffResponse
                                try {
                                    BffResponse<Object, Object> bffResponse = objectMapper.readValue(body, 
                                        new TypeReference<BffResponse<Object, Object>>() {});
                                    
                                    // Manejar el error utilizando los valores de BffResponse
                                    String errorMessage = bffResponse.getErrorMessage();
                                    int errorCode = bffResponse.getErrorCode();

                                    // Lanza la excepción con Mono.error, interrumpe el flujo
                                    CustomException customException = new CustomException(errorMessage, errorCode);
                                    return Mono.error(customException);
                                } catch (IOException e) {
                                    return Mono.error(new RuntimeException("Error al procesar el cuerpo de la respuesta: " + e.getMessage()));
                                }
                            });
                })
                .onStatus(status -> status.value() != 422, response -> {
                    // Si no es 422, simplemente continuamos con el siguiente filtro
                    return response.bodyToMono(String.class)
                            .then(chain.filter(exchange));  // Continuamos con el siguiente filtro
                })
                .then(chain.filter(exchange));  // Continúa con el siguiente filtro si no se lanza error
    }

    // Excepción personalizada
    public static class CustomException extends RuntimeException {
        private final int errorCode;

        public CustomException(String message, int errorCode) {
            super(message);
            this.errorCode = errorCode;
        }

        public int getErrorCode() {
            return errorCode;
        }
    }
}