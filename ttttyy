import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.ClientResponse;
import reactor.core.publisher.Mono;

@Component
public class CustomGatewayInterceptor implements WebFilter {

    private final WebClient webClient;

    public CustomGatewayInterceptor(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://tu-api-base-url").build();
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        return webClient.get()
                .uri("/ruta-del-cliente")
                .retrieve()
                .onStatus(status -> status.value() == 422, response -> {
                    // Si el código de estado es 422, extraemos el cuerpo y lo deserializamos a un BFFResponse
                    return response.bodyToMono(BFFResponse.class)
                            .flatMap(bffResponse -> {
                                // Aquí tenemos el BFFResponse, ahora podemos manipularlo o devolverlo como respuesta
                                // Puedes realizar cualquier lógica que necesites con el BFFResponse

                                // Si necesitas devolverlo como un ResponseEntity<BFFResponse>
                                exchange.getResponse().setStatusCode(HttpStatus.UNPROCESSABLE_ENTITY);

                                // Aquí puedes devolver el cuerpo de la respuesta como un Mono
                                return exchange.getResponse().writeWith(Mono.just(
                                        exchange.getResponse().bufferFactory().wrap(
                                                // Serializar el BFFResponse a JSON o cualquier formato necesario
                                                serializeToJson(bffResponse) // Método ficticio de serialización
                                        )
                                ));
                            });
                })
                .onStatus(status -> status.value() != 422, response -> {
                    // Para otros códigos de estado, continuamos con el siguiente filtro
                    return response.bodyToMono(String.class)
                            .then(chain.filter(exchange));  // Continuamos con el siguiente filtro
                })
                .then(chain.filter(exchange));  // Continua con el siguiente filtro si no hay error
    }

    // Método ficticio para serializar el BFFResponse a JSON o en el formato que necesites
    private byte[] serializeToJson(BFFResponse bffResponse) {
        try {
            // Usando Jackson para convertir el BFFResponse a bytes (JSON)
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.writeValueAsBytes(bffResponse);
        } catch (Exception e) {
            throw new RuntimeException("Error serializando BFFResponse a JSON", e);
        }
    }
}a