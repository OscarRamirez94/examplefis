private static final Pattern URL_PATTERN = Pattern.compile("(?i)https?://");

public boolean contieneUrl(Map<String, String> mapa) {
    return mapa.values().stream()
        .filter(Objects::nonNull)
        .anyMatch(valor -> URL_PATTERN.matcher(valor).find());
}



Map<String, String> headers = Map.of(
    "Authorization", "Bearer xyz",
    "X-Custom", "https://malicioso.com"
);

if (contieneUrl(headers)) {
    throw new SecurityException("üö® Par√°metro contiene URL. Posible SSRF.");



mmmmmm



public void generarPdf(List<Item> items) {
    for (Item item : items) {
        // Usamos try-with-resources para asegurar que el InputStream se cierre correctamente
        try (InputStream is = getPdftemplate(item.name)) {
            // Llamamos al switch para procesar el InputStream
            switch (item.getTipoDecaimiento()) {
                case TIPO_1:
                    // Crear el objeto para TIPO_1
                    procesarTipo1(is);
                    break;
                case TIPO_2:
                    // Crear el objeto para TIPO_2
                    procesarTipo2(is);
                    break;
                // Otros casos seg√∫n el tipo de decaimiento
            }
        } catch (IOException e) {
            // Manejar la excepci√≥n de forma adecuada
            e.printStackTrace();
        }
    }
}