2private static final Pattern URL_PATTERN = Pattern.compile("(?i)https?://");

public boolean contieneUrl(Map<String, String> mapa) {
    return mapa.values().stream()
        .filter(Objects::nonNull)
        .anyMatch(valor -> URL_PATTERN.matcher(valor).find());
}



Map<String, String> headers = Map.of(
    "Authorization", "Bearer xyz",
    "X-Custom", "https://malicioso.com"
);

if (contieneUrl(headers)) {
    throw new SecurityException("ðŸš¨ ParÃ¡metro contiene URL. Posible SSRF.");



mmmmmm



public void generarPdf(List<Item> items) {
    for (Item item : items) {
        // Usamos try-with-resources para asegurar que el InputStream se cierre correctamente
        try (InputStream is = getPdftemplate(item.name)) {
            // Llamamos al switch para procesar el InputStream
            switch (item.getTipoDecaimiento()) {
                case TIPO_1:
                    // Crear el objeto para TIPO_1
                    procesarTipo1(is);
                    break;
                case TIPO_2:
                    // Crear el objeto para TIPO_2
                    procesarTipo2(is);
                    break;
                // Otros casos segÃºn el tipo de decaimiento
            }
        } catch (IOException e) {
            // Manejar la excepciÃ³n de forma adecuada
            e.printStackTrace();
        }
    }
}


animado
import java.lang.reflect.*;
import java.util.*;
import java.util.regex.Pattern;

public class ValidadorDeUrls {

    private static final Pattern URL_PATTERN = Pattern.compile("(?i)https?://");

    public boolean contieneUrlEnObjeto(Object objeto) {
        return contieneUrlEnObjeto(objeto, new HashSet<>());
    }

    private boolean contieneUrlEnObjeto(Object objeto, Set<Object> visitados) {
        if (objeto == null || visitados.contains(objeto)) return false;
        visitados.add(objeto);

        if (objeto instanceof String valor) {
            return URL_PATTERN.matcher(valor).find();
        }

        if (objeto instanceof Collection<?> coleccion) {
            for (Object item : coleccion) {
                if (contieneUrlEnObjeto(item, visitados)) return true;
            }
            return false;
        }

        if (objeto instanceof Map<?, ?> mapa) {
            for (Object valor : mapa.values()) {
                if (contieneUrlEnObjeto(valor, visitados)) return true;
            }
            return false;
        }

        if (objeto.getClass().isArray()) {
            int length = Array.getLength(objeto);
            for (int i = 0; i < length; i++) {
                Object element = Array.get(objeto, i);
                if (contieneUrlEnObjeto(element, visitados)) return true;
            }
            return false;
        }

        // Si es tipo primitivo, enum, wrapper, etc. => ignorar
        if (esTipoBasico(objeto.getClass())) {
            return false;
        }

        // Revisar campos del objeto (reflexiÃ³n)
        Field[] fields = objeto.getClass().getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            try {
                Object valor = field.get(objeto);
                if (contieneUrlEnObjeto(valor, visitados)) {
                    return true;
                }
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }

        return false;
    }

    private boolean esTipoBasico(Class<?> clazz) {
        return clazz.isPrimitive()
            || clazz.equals(String.class)
            || Number.class.isAssignableFrom(clazz)
            || Boolean.class.equals(clazz)
            || Character.class.equals(clazz)
            || Date.class.isAssignableFrom(clazz)
            || clazz.isEnum();
    }
}


example 


PerfilDTO perfil = new PerfilDTO("admin", "https://malicioso.com/foto.jpg");
UsuarioDTO usuario = new UsuarioDTO("Carlos", perfil);

ValidadorDeUrls validador = new ValidadorDeUrls();

if (validador.contieneUrlEnObjeto(usuario)) {
    System.out.println("ðŸš¨ El DTO contiene una URL (incluso anidada)");
} else {
    System.out.println("âœ… DTO limpio.");
}


import jakarta.validation.constraints.Pattern;

public class MiDTO {

    @Pattern(
        regexp = "^(?!.*https?://).*$",
        message = "El campo no debe contener URLs (http o https)"
    )
    private String comentario;

    // getters y setters
}