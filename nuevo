import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;

import java.io.IOException;
import java.net.InetAddress;
import java.net.URI;
import java.net.UnknownHostException;
import java.util.List;

public class SafeHostInterceptor implements ClientHttpRequestInterceptor {

    private final List<String> allowedHosts;

    public SafeHostInterceptor(List<String> allowedHosts) {
        this.allowedHosts = allowedHosts;
    }

    @Override
    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)
            throws IOException {

        URI uri = request.getURI();
        validateUri(uri);

        return execution.execute(request, body);
    }

    private void validateUri(URI uri) throws IOException {
        String host = uri.getHost();

        if (!allowedHosts.contains(host)) {
            throw new IOException("Host no permitido: " + host);
        }

        try {
            InetAddress addr = InetAddress.getByName(host);
            if (addr.isAnyLocalAddress() || addr.isLoopbackAddress() || addr.isSiteLocalAddress()) {
                throw new IOException("Host bloqueado (privado/loopback): " + host);
            }
        } catch (UnknownHostException e) {
            throw new IOException("No se puede resolver el host: " + host);
        }
    }
}


zzzzzz


import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

@Component
public class RestTemplateInterceptorInjector implements BeanPostProcessor {

    private final SecurityProperties securityProperties;

    public RestTemplateInterceptorInjector(SecurityProperties securityProperties) {
        this.securityProperties = securityProperties;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        if (bean instanceof RestTemplate restTemplate) {
            // ðŸ‘‡ agregas tu interceptor a TODOS los RestTemplate
            restTemplate.getInterceptors().add(
                new SafeHostInterceptor(securityProperties.getAllowedHosts())
            );
        }
        return bean;
    }
}