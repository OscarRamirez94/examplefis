7@Configuration
public class WebClientConfig {

    @Bean
    public WebClient secureWebClient() throws Exception {
        // Carga el truststore generado a partir del .crt
        KeyStore trustStore = KeyStore.getInstance("JKS");
        try (InputStream trustStream = new FileInputStream("ruta/a/truststore.jks")) {
            trustStore.load(trustStream, "123456".toCharArray());
        }

        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
                TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);

        SslContext sslContext = SslContextBuilder.forClient()
                .trustManager(trustManagerFactory)
                .build();

        HttpClient httpClient = HttpClient.create()
                .secure(t -> t.sslContext(sslContext));

        return WebClient.builder()
                .clientConnector(new ReactorClientHttpConnector(httpClient))
                .baseUrl("https://tu-api-segura.com")
                .build();
    }
}




@Service
public class MyWebClientServiceImpl implements MyWebClientService {

    private final WebClient webClient;

    public MyWebClientServiceImpl(@Qualifier("secureWebClient") WebClient webClient) {
        this.webClient = webClient;
    }

    @Override
    public Mono<Map<String, Object>> sendPostRequest(MyRequestDto dto) {
        return webClient.post()
                .uri("/ruta")
                .bodyValue(dto)
                .retrieve()
                .bodyToMono(new ParameterizedTypeReference<>() {});
    }
}



@Service
public class MyWebClientServiceImpl implements MyWebClientService {

    private final WebClient webClient;

    public MyWebClientServiceImpl(@Qualifier("secureWebClient") WebClient webClient) {
        this.webClient = webClient;
    }

    @Override
    public Mono<Map<String, Object>> sendPostRequest(MyRequestDto dto) {
        return webClient.post()
                .uri("/ruta")
                .bodyValue(dto)
                .retrieve()
                .bodyToMono(new ParameterizedTypeReference<>() {});
    }
}


openssl x509 -in tu-cert.crt -text -noout


SslContext sslContext = SslContextBuilder.forClient()
    .trustManager(InsecureTrustManagerFactory.INSTANCE)
    .build();

HttpClient httpClient = HttpClient.create()
    .secure(ssl -> ssl.sslContext(sslContext));

WebClient webClient = WebClient.builder()
    .clientConnector(new ReactorClientHttpConnector(httpClient))
    .baseUrl("https://el-host-que-sea")
    .build();


logging:
  level:
    reactor.netty.http.client: DEBUG
    org.springframework.web.reactive.function.client: DEBUG



webClient.post()
    .uri("/ruta")
    .bodyValue(dto)
    .retrieve()
    .onStatus(HttpStatus::is5xxServerError, clientResponse ->
        clientResponse.bodyToMono(String.class)
            .flatMap(errorBody -> {
                System.out.println("Error 500 recibido del servidor: " + errorBody);
                return Mono.error(new RuntimeException("Error 500 del servidor: " + errorBody));
            })
    )
    .bodyToMono(new ParameterizedTypeReference<Map<String, Object>>() {})