import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;

@Component
public class LogoutOnErrorFilter implements GlobalFilter, Ordered {

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, org.springframework.cloud.gateway.filter.GatewayFilterChain chain) {
        String requestPath = exchange.getRequest().getURI().getPath();

        // Solo aplicamos el filtro si la petición es al endpoint específico
        if (!requestPath.equals("/api/login")) {
            return chain.filter(exchange);
        }

        return chain.filter(exchange).then(Mono.defer(() -> {
            ServerHttpResponse response = exchange.getResponse();

            // Verificar si la respuesta es un error controlado
            if (response.getStatusCode() == HttpStatus.BAD_REQUEST) {
                return response.getBody().collectList().flatMap(dataBufferList -> {
                    String responseBody = dataBufferList.stream()
                            .map(dataBuffer -> {
                                byte[] bytes = new byte[dataBuffer.readableByteCount()];
                                dataBuffer.read(bytes);
                                return new String(bytes, StandardCharsets.UTF_8);
                            })
                            .reduce("", String::concat);

                    // Si el body contiene "Sesión inválida", hacemos logout
                    if (responseBody.contains("Sesión inválida")) {
                        System.out.println("Sesión inválida detectada en /api/login. Deslogueando...");
                        exchange.getResponse().getHeaders().add("Logout", "true");
                    }

                    return Mono.empty();
                });
            }

            return Mono.empty();
        }));
    }

    @Override
    public int getOrder() {
        return -1; // Alta prioridad
    }
}