import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;
import org.springframework.core.io.buffer.DataBuffer;
import com.fasterxml.jackson.databind.ObjectMapper;

@Component
public class CustomGatewayFilter implements WebFilter {

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        // Aquí simulamos la condición que devolvería un 422
        boolean condition = true; // Esto sería una lógica que determina cuando devolver 422

        if (condition) {
            // Regresamos una respuesta con el cuerpo en 422
            return handle422Response(exchange)
                    .then(Mono.defer(() -> {
                        // Después de regresar la respuesta 422, lanzamos una excepción controlada
                        return Mono.error(new CustomException("Error en procesamiento de datos"));
                    }));
        }

        // Si la condición no se cumple, seguimos con el siguiente filtro
        return chain.filter(exchange);
    }

    private Mono<Void> handle422Response(ServerWebExchange exchange) {
        // Cuerpo de la respuesta para 422
        String responseBody = "{\"message\": \"Error en el procesamiento\", \"status\": 422}";

        // Establecemos el código de estado y el tipo de contenido
        exchange.getResponse().setStatusCode(HttpStatus.UNPROCESSABLE_ENTITY);
        exchange.getResponse().getHeaders().add("Content-Type", "application/json");

        // Convertimos el cuerpo a DataBuffer para enviar
        DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(responseBody.getBytes());

        // Escribimos la respuesta y completamos
        return exchange.getResponse().writeWith(Mono.just(dataBuffer))
                .then();
    }
}