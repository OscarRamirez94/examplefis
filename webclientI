public interface MyWebClientService {
    Mono<String> sendPostRequest(MyRequestDto dto);
}



@Service
public class MyWebClientServiceImpl implements MyWebClientService {

    private final WebClient webClient;

    public MyWebClientServiceImpl(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("https://api.ejemplo.com").build();
    }

    @Override
    public Mono<String> sendPostRequest(MyRequestDto dto) {
        return webClient.post()
                .uri("/ruta/del/endpoint")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(dto)
                .retrieve()
                .bodyToMono(String.class); // Puedes cambiar el tipo de respuesta seg√∫n lo que devuelva el endpoint
    }
}



@RestController
@RequestMapping("/test")
public class TestController {

    private final MyWebClientService myWebClientService;

    public TestController(MyWebClientService myWebClientService) {
        this.myWebClientService = myWebClientService;
    }

    @PostMapping
    public Mono<ResponseEntity<String>> testPost(@RequestBody MyRequestDto dto) {
        return myWebClientService.sendPostRequest(dto)
                .map(response -> ResponseEntity.ok(response))
                .onErrorResume(e -> Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage())));
    }
}