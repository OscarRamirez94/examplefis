public RestResponse<Map<String, Object>> getMapRestResponseFromPassport(
    String mobileFlowName,
    Map<String, String> properties,
    String passportUrl,
    String passportServiceName
) {
    // âœ… ValidaciÃ³n de seguridad mÃ­nima para cumplir con Checkmarx
    URI uri;
    try {
        uri = new URI(passportUrl);
        if (!"https".equalsIgnoreCase(uri.getScheme())) {
            throw new IllegalArgumentException("Solo se permiten URLs HTTPS");
        }

        // âœ… (Opcional) Validar host contra lista blanca
        List<String> allowedHosts = List.of(
            "api1.miempresa.com",
            "api2.miempresa.com",
            "servicios.seguridad.com"
        );
        if (!allowedHosts.contains(uri.getHost())) {
            throw new IllegalArgumentException("Host no autorizado: " + uri.getHost());
        }

    } catch (URISyntaxException e) {
        throw new IllegalArgumentException("URL malformada: " + passportUrl);
    }

    // ðŸ”§ Agrega headers desde el mapa
    HttpHeaders headers = new HttpHeaders();
    properties.forEach(headers::add);

    // ðŸ“¤ Armar el request GET
    RequestEntity<Void> requestEntity = RequestEntity
        .get(uri)
        .headers(headers)
        .build();

    // ðŸ“¥ Hacer el request
    ResponseEntity<Map<String, Object>> responseEntity = restTemplate.exchange(
        requestEntity,
        new ParameterizedTypeReference<Map<String, Object>>() {}
    );

    return new RestResponse<>(mobileFlowName, passportServiceName, responseEntity);
}