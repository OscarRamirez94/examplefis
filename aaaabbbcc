import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.ClientResponse;
import reactor.core.publisher.Mono;

@Component
public class CustomGatewayInterceptor implements WebFilter {

    private final WebClient webClient;

    public CustomGatewayInterceptor(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://tu-api-base-url").build();
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        return webClient.get()
                .uri("/ruta-del-cliente")
                .retrieve()
                .onStatus(status -> status.value() == 422, response -> {
                    // Procesar la respuesta de error y devolver el BFFResponse como error en Mono
                    return response.bodyToMono(BFFResponse.class)  // Suponiendo que la respuesta es un BFFResponse
                            .flatMap(bffResponse -> {
                                // Emitimos el BFFResponse dentro de Mono.error()
                                return Mono.error(new BFFResponseException(bffResponse));
                            });
                })
                .then(chain.filter(exchange)); // Continua con el siguiente filtro si no se lanza el error
    }
}