@Service
public class MiServicioIntermedio {

    private final MiServicioWebClient servicioWebClient;

    public MiServicioIntermedio(MiServicioWebClient servicioWebClient) {
        this.servicioWebClient = servicioWebClient;
    }

    @HandleWebClientErrors
    public Mono<ResponseEntity<?>> obtenerCredito() {
        return servicioWebClient.obtenerCredito()
            .map(response -> {
                if (response.getStatusCode() == HttpStatus.OK) {
                    // Convertir OtroDto a Dto1 si es necesario
                    Dto1 dto1 = convertirOtroDtoADto1(response.getBody());
                    return ResponseEntity.ok(dto1);
                } else {
                    // Manejo de error
                    ErrorResponse error = new ErrorResponse("ERROR", "Detalles del error");
                    return ResponseEntity.status(response.getStatusCode()).body(error);
                }
            });
    }

    private Dto1 convertirOtroDtoADto1(OtroDto otroDto) {
        // Lógica para convertir OtroDto a Dto1
        return new Dto1(otroDto.getCampo1(), otroDto.getCampo2());
    }
}



4
@Aspect
@Component
public class WebClientErrorAspect {

    @Around("execution(* com.miempresa.servicio.impl.MiServicioWebClient.*(..)) && @annotation(HandleWebClientErrors)")
    public Object manejarErrores(ProceedingJoinPoint pjp) throws Throwable {
        try {
            Mono<?> original = (Mono<?>) pjp.proceed();

            return original.onErrorResume(WebClientResponseException.class, ex -> {
                // Manejo de error y envolver en un ResponseEntity
                ErrorResponse error = new ErrorResponse(
                    String.valueOf(ex.getRawStatusCode()),
                    ex.getResponseBodyAsString()
                );
                return Mono.just(ResponseEntity.status(ex.getRawStatusCode()).body(error));
            });

        } catch (Throwable ex) {
            // Manejo de errores generales
            ErrorResponse error = new ErrorResponse("500", "Fallo inesperado: " + ex.getMessage());
            return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error));
        }
    }
}




@Aspect
@Component
public class WebClientErrorAspect {

    @Around("execution(* com.miempresa.servicio.impl..*(..)) && @annotation(HandleWebClientErrors)")
    public Object manejarErrores(ProceedingJoinPoint pjp) throws Throwable {
        try {
            @SuppressWarnings("unchecked")
            Mono<?> original = (Mono<?>) pjp.proceed();

            return original.onErrorResume(WebClientResponseException.class, ex -> {
                ErrorResponse error = new ErrorResponse(
                    String.valueOf(ex.getRawStatusCode()),
                    ex.getResponseBodyAsString()
                );
                
                ResponseEntity<ErrorResponse> response = ResponseEntity
                    .status(ex.getRawStatusCode())
                    .body(error);

                return Mono.just(response); // <-- AQUÍ devuelves un ResponseEntity
            });

        } catch (Throwable ex) {
            ErrorResponse error = new ErrorResponse("500", "Fallo inesperado: " + ex.getMessage());
            return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error));
        }
    }
}




@Around("execution(* com.tuempresa.tuproyecto.servicio.impl.MiServicioWebClientImpl.*(..))")
public Object interceptarErrores(ProceedingJoinPoint pjp) throws Throwable {
    // lógica del AOP
}




public class ClientException extends RuntimeException {

    private final int statusCode;
    private final String responseBody;

    public ClientException(String message, int statusCode, String responseBody) {
        super(message);
        this.statusCode = statusCode;
        this.responseBody = responseBody;
    }

    public int getStatusCode() {
        return statusCode;
    }

    public String getResponseBody() {
        return responseBody;
    }
}


@Around("@annotation(HandleWebClientErrors)")
public Object interceptarErrores(ProceedingJoinPoint pjp) throws Throwable {
    try {
        @SuppressWarnings("unchecked")
        Mono<?> original = (Mono<?>) pjp.proceed();

        return original.onErrorResume(WebClientResponseException.class, ex -> {
            // Puedes lanzar una excepción custom que tu GlobalExceptionHandler atrape
            return Mono.error(new ClienteException("Error remoto: " + ex.getMessage(), ex.getStatusCode()));
        });

    } catch (Throwable ex) {
        return Mono.error(new RuntimeException("Fallo inesperado: " + ex.getMessage()));
    }
}




@Aspect
@Component
public class WebClientErrorAspect {

    @Around("execution(public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.ejemplo.miapp.dto.BffResponse<..>>> com.ejemplo.miapp.servicio.MiServicioWebClient.*(..))")
    public Object interceptarErrores(ProceedingJoinPoint pjp) throws Throwable {
        try {
            @SuppressWarnings("unchecked")
            Mono<ResponseEntity<?>> original = (Mono<ResponseEntity<?>>) pjp.proceed();

            return original.onErrorResume(WebClientResponseException.class, ex -> {
                HttpStatus status = ex.getStatusCode();
                ErrorResponse error = new ErrorResponse(String.valueOf(status.value()), ex.getResponseBodyAsString());
                BffResponse<Object, ErrorResponse> response = new BffResponse<>(error);
                return Mono.just(ResponseEntity.status(status).body(response));
            });

        } catch (Throwable ex) {
            ErrorResponse error = new ErrorResponse("500", "Error inesperado: " + ex.getMessage());
            BffResponse<Object, ErrorResponse> response = new BffResponse<>(error);
            return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response));
        }
    }
}